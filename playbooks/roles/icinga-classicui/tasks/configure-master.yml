---
# Node wizard steps
# ->  https://raw.githubusercontent.com/Icinga/icinga2/master/lib/cli/nodewizardcommand.cpp
#  /* 0. master or node setup?
#   * 1. Ticket
#   * 2. Master information for autosigning
#   * 3. Trusted cert location
#   * 4. CN to use (defaults to FQDN)
#   * 5. Local CA
#   * 6. New self signed certificate
#   * 7. Request signed certificate from master
#   * 8. copy key information to /etc/icinga2/pki
#   * 9. enable ApiListener feature
#   * 10. generate zones.conf with endpoints and zone objects
#   * 11. set NodeName = cn in constants.conf
#   * 12. reload icinga2, or tell the user to
#   */

# Icinga2 ca & csr generation runs as the icinga user and can't write in /etc/icinga2/pki
# so we need lot's of extra steps to move everything in place here... :(
- name: generate ca
  shell: icinga2 pki new-ca creates=/var/lib/icinga2/ca/ca.key
  notify: restart icinga

# other option: chown the pki dir and do everything there...
# - name: prepare pki directory
#  file: path=/etc/icinga2/pki state=directory owner=nagios group=nagios mode=0700

- name: configure master node | create csr dir
  file: path=/var/lib/icinga2/csr state=directory owner=nagios group=nagios mode=0700

- name: configure master node | generate csr
  shell: icinga2 pki new-cert --cn {{ ansible_fqdn }} --key /var/lib/icinga2/csr/{{ ansible_fqdn }}.key --csr /var/lib/icinga2/csr/{{ ansible_fqdn }}.csr creates=/var/lib/icinga2/csr/{{ ansible_fqdn }}.csr

- name: configure master node | sign csr
  shell: icinga2 pki sign-csr --csr /var/lib/icinga2/csr/{{ ansible_fqdn }}.csr --cert /var/lib/icinga2/csr/{{ ansible_fqdn }}.crt creates=/var/lib/icinga2/csr/{{ ansible_fqdn }}.crt

# copy everything
- name: configure master node | copy ca to /etc/icinga2/pki
  shell: rsync -a /var/lib/icinga2/ca/ca.crt /etc/icinga2/pki/ca.crt creates=/etc/icinga2/pki/ca.crt
  notify: restart icinga

- name: configure master node | copy key to /etc/icinga2/pki
  shell: rsync -a /var/lib/icinga2/csr/{{ ansible_fqdn }}.key /etc/icinga2/pki/{{ ansible_fqdn }}.key creates=/etc/icinga2/pki/{{ ansible_fqdn }}.key
  notify: restart icinga

- name: configure master node | copy csr to /etc/icinga2/pki
  shell: rsync -a /var/lib/icinga2/csr/{{ ansible_fqdn }}.csr /etc/icinga2/pki/{{ ansible_fqdn }}.csr creates=/etc/icinga2/pki/{{ ansible_fqdn }}.csr
  notify: restart icinga

- name: configure master node | copy crt to /etc/icinga2/pki
  shell: rsync -a /var/lib/icinga2/csr/{{ ansible_fqdn }}.crt /etc/icinga2/pki/{{ ansible_fqdn }}.crt creates=/etc/icinga2/pki/{{ ansible_fqdn }}.crt
  notify: restart icinga

- name: configure master node | enable api
  shell: icinga2 feature enable api creates=/etc/icinga2/features-enabled/api.conf
  notify: restart icinga

- name: configure master node | configure zones.conf
  template: src=zones.conf.j2 dest=/etc/icinga2/zones.conf owner=root group=root mode=0644 
  notify: restart icinga

- name: configure master node | configure constants.conf
  template: src=constants.conf.j2 dest=/etc/icinga2/constants.conf owner=root group=root mode=0644
  notify: restart icinga

#- name: execute node wizard - yes, it's ugly
#  script: nodewizard.sh creates=/var/lib/icinga2/ca/ca.crt

- name: create icinga2 database
  mysql_db: name={{ idodbname }} state=present
  register: icingadb

- name: create icinga2 database user
  mysql_user: name={{ idodbuser }} password={{ idodbpass }} priv={{ idodbname }}.*:ALL append_privs=true state=present

- name: load database schema
  mysql_db: state=import name={{ idodbname }} target=/usr/share/icinga2-ido-mysql/schema/mysql.sql
  when: icingadb.changed

- name: put ido-mysql.conf
  template: src=ido-mysql.conf.j2 dest=/etc/icinga2/features-available/ido-mysql.conf
  notify: restart icinga

- name: enable ido-mysql feature for web
  shell: icinga2 feature enable ido-mysql creates=/etc/icinga2/features-enabled/ido-mysql.conf
  notify: restart icinga
